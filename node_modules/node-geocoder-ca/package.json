{
  "name": "node-geocoder-ca",
  "description": "Node.js module to interface with the Geocoder.ca API",
  "main": "./index.js",
  "author": {
    "name": "Chris Morrell",
    "url": "http://cmorrell.com"
  },
  "keywords": [
    "geocode",
    "geocoder",
    "geo",
    "location"
  ],
  "version": "0.1.2",
  "engines": {
    "node": ">=0.8"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/inxilpro/node-geocoder-ca"
  },
  "bugs": {
    "url": "https://github.com/inxilpro/node-geocoder-ca/issues"
  },
  "license": "MIT",
  "dependencies": {
    "sax": "~0.5"
  },
  "devDependencies": {
    "vows": "~0.7"
  },
  "scripts": {
    "test": "node test/index.js"
  },
  "readme": "Geocoder.ca Module\n===========================\n\nNode.js module to interface with the Geocoder.ca API.\n[![Build Status](https://travis-ci.org/inxilpro/node-geocoder-ca.png)](https://travis-ci.org/inxilpro/node-geocoder-ca)\n\nUsage\n---------------------------\n\nAccepts a `location` argument and a `callback`.  `callback` receives\ntwo params: `err` and `coords`.  In the case of an error, `err` will\ncontain an `Error` object.  Otherwise, `coords` will be populated with\na `Coords` object, with `lat` and `lon` properties.\n\n`location` can be one of the following:\n\n - a String with location (eg. __\"525 Market St, Philadelphia, PA 19106\"__)\n - a String with a zip/postal code (eg. __\"19106\"__ or __\"M4A 2L7\"__)\n - a Number with a 5-digit zip code (eg. __19106__)\n - an Object containing one of the following:\n    - a single `locate` property containing one of the above\n    - a single `postal` propery containing a zip or postal code\n    - the following four properties: `addresst`, `stno`, `city`, and `prov`\n\nIf `location` is an object, it is converted to a query string and passed directly\nto the Geocoder.ca API.  See [API docs](http://geocoder.ca/?premium_api=1) for parameters.\n\nExample\n---------------------------\n\n```javascript\nvar Geocoder = require('node-geocoder-ca').Geocoder,\n\tgeocoder = new Geocoder(),\n\taddress = '525 Market St, Philadelphia, PA 19106';\n\ngeocoder.geocode(address, function(err, coords) {\n\tif (err) {\n\t\tthrow err;\n\t}\n\n\tconsole.log(\"%s geocoded to [%d, %d]\", address, coords.lat, coords.lon);\n});\n```\n\nEvents\n---------------------------\nThe `Geocoder` object is an event emitter.  It emits the following events:\n\n - A `result` event happens whenever geocoding succeeds.  It passes a `Coords` object to any listeners.\n - A `error` event happens whenever there is an error.  It passes the `Error` object to any listeners.\n\nYou can choose to skip the `callback` on the `geocode()` method and listen for events instead.\n\n**Warning: this usage is currently untested.**\n\nExample:\n\n```javascript\nvar Geocoder = require('node-geocoder-ca').Geocoder,\n\tgeocoder = new Geocoder(),\n\taddress = '525 Market St, Philadelphia, PA 19106';\n\ngeocoder.geocode(address)\n\t.on('result', function(coords) { /* ... */ })\n\t.on('error', function(err) { /* ... */ });\n```\n\nTodo\n---------------------------\n- [x] Basic geocoding\n- [ ] Suggestions on failed geocoding\n- [ ] Reverse geocoding\n- [ ] Tests for event-based usage",
  "readmeFilename": "README.md",
  "_id": "node-geocoder-ca@0.1.2",
  "dist": {
    "shasum": "354881724841ea9c4ee7f6bd2785298ec7613e90"
  },
  "_from": "node-geocoder-ca@",
  "_resolved": "https://registry.npmjs.org/node-geocoder-ca/-/node-geocoder-ca-0.1.2.tgz"
}
